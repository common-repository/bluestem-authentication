<?php

/*
 * Plugin Name: Bluestem Authentication
 * Plugin URI: https://wordpress.org/plugins/bluestem-authentication
 * Description: Authenticate users using Bluestem authentication. Based on HTTP Authentication plugin by Daniel Westermann-Clark.
 * Version: 0.6.1
 * Author: Johnathan Kupferer
 * Author URI: https://accc.uic.edu
 * License: GPL2
 */

/*
  Copyright 2014 Johnathan Kupferer (email : jtk@uic.edu)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2, as 
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'options-page.php');

class BluestemAuthenticationPlugin {
	var $db_version = 2;
	var $option_name = 'bluestem_authentication_options';
	var $options;
	function __construct() {
		$this->options = get_option($this->option_name);
		$this->check_options();

		if (is_admin() ) {
			$options_page = new BluestemAuthenticationOptionsPage($this, $this->option_name, __FILE__, $this->options);
			add_action('admin_init', array($this, 'check_options'));
		}

		add_action('login_head', array($this, 'add_login_css'));
		add_action('login_footer', array($this, 'add_bluestem_login_footer'));
		add_action('check_passwords', array($this, 'generate_password'), 10, 3);
		add_action('wp_logout', array($this, 'logout'));
		add_filter('wpmu_validate_user_signup', array($this, 'validate_username'));
		add_filter('login_url', array($this, 'bypass_reauth'));
		add_filter('show_password_fields', array($this, 'allow_wp_auth'));
		add_filter('allow_password_reset', array($this, 'allow_wp_auth'));
		add_filter('authenticate', array($this, 'authenticate'), 10, 3);
	}

	/*
	 * Check the options currently in the database and upgrade if necessary.
	 */
	function check_options() {
		if ($this->options === false || ! isset($this->options['db_version']) || $this->options['db_version'] < $this->db_version) {
			if (! is_array($this->options)) {
				$this->options = array();
			}

			$current_db_version = isset($this->options['db_version']) ? $this->options['db_version'] : 0;
			$this->upgrade($current_db_version);
			$this->options['db_version'] = $this->db_version;
			update_option($this->option_name, $this->options);
		}
	}

	/*
	 * Upgrade options as needed depending on the current database version.
	 */
	function upgrade($current_db_version) {
		$default_options = array(
			'allow_wp_auth' => false,
			'auth_label' => 'UIC Common Password',
			'bluestem_path' => '/bluestem/cgi',
			'auto_create_user' => false,
			'auto_create_email_domain' => 'uic.edu',
			'min_length' => 3, 
		);

		if ($current_db_version < 1) {
			foreach ($default_options as $key => $value) {
				// Handle migrating existing options from before we stored a db_version
				if (! isset($this->options[$key])) {
					$this->options[$key] = $value;
				}
			}
		}
	}
	
	/*
	 * This function was snipped from Network Username Restrictions Override plugin 
	 * https://wordpress.org/plugins/network-username-restrictions-override/
	 *
	 * Override errors generated by WordPress due to network username
	 * restrictions that are sort of insane.
	 */
	function validate_username($result) {
		$default_options = array(
			'min_length' => 3,
		);
		if (! is_wp_error($result['errors'])) {
			return $result;
		}

		$username = $result['user_name'];

		// Copy any error messages that have not been overridden
		$new_errors = new WP_Error();

		$errors = $result['errors'];
		$codes = $errors->get_error_codes();

		foreach ($codes as $code) {
			$messages = $errors->get_error_messages($code);

			if ($code == 'user_name') {
				foreach ($messages as $message) {
					if ($message == __('Username must be at least 3 characters.')) {
						// Check the username length

						if (strlen($username) < $this->options['min_length']) {
							$new_errors->add($code, $message);
						}
					}
					else {
						// Restore other username errors
						$new_errors->add($code, $message);
					}
				}
			}
			else {
				// Restore any other errors
				foreach ($messages as $message) {
					$new_errors->add($code, $message);
				}
			}
		}
	}
	function add_login_css() {
?>
<style type="text/css">
p#bluestem-authentication-link {
  width: 100%;
  height: 4em;
  text-align: center;
  margin-top: 2em;
}
p#bluestem-authentication-link a {
  margin: 0 auto;
  float: none;
}
p.bluestem-error {
  color: #800;
  text-align: center;
}
</style>
<?php
	}

	/*
	 * Add a link to the login form to initiate external authentication.
	 */
	function add_bluestem_login_footer() {
		global $redirect_to,  $bluestem_login_error;
		if( $bluestem_login_error ) {
			echo '<p class="bluestem-error">' . $bluestem_login_error->get_error_message() . "</p>\n";
			$logout_uri = 'https://'.$_SERVER["HTTP_HOST"].$this->options['bluestem_path'].'/logout.cgi?redirect='.urlencode(wp_login_url($redirect_to));
			$auth_label = $this->options['auth_label'];
			echo '<p id="bluestem-authentication-link"><a class="button-primary" href="' . htmlspecialchars($logout_uri) . '">Logout ' . htmlspecialchars($auth_label) . '</a></p>' . "\n";
		} else {
			$bluestem_path = $this->options['bluestem_path'];
			$login_uri = preg_replace('/(\w)\/(\w)/',"$1$bluestem_path/lb_login.cgi/$2",wp_login_url($redirect_to),1);
			$auth_label = $this->options['auth_label'];
			echo '<p id="bluestem-authentication-link"><a class="button-primary" href="' . htmlspecialchars($login_uri) . '">Login with ' . htmlspecialchars($auth_label) . '</a></p>' . "\n";
		}

	}

	/*
	 * Generate a password for the user. This plugin does not require the
	 * administrator to enter this value, but we need to set it so that user
	 * creation and editing works.
	 */
	function generate_password($username, $password1, $password2) {
		if (! $this->allow_wp_auth()) {
			$password1 = $password2 = wp_generate_password();
		}
	}

	/*
	 * Logout the user by redirecting unsetting Bluestem cookies and ending the
	 * wordpress session.
	 */
	function logout() {
		global $redirect_to;
		if( $_SERVER['REMOTE_USER'] || $_SERVER['REDIRECT_REMOTE_USER'] ) {
			wp_redirect('https://'.$_SERVER["HTTP_HOST"].$this->options['bluestem_path'].'/logout.cgi?redirect='.urlencode(wp_logout_url()));
			exit();
		}
	}

	/*
	 * Remove the reauth=1 parameter from the login URL, if applicable. This allows
	 * us to transparently bypass the mucking about with cookies that happens in
	 * wp-login.php immediately after wp_signon when a user e.g. navigates directly
	 * to wp-admin.
	 */
	function bypass_reauth($login_url) {
		$login_url = remove_query_arg('reauth', $login_url);

		return $login_url;
	}

	/*
	 * Can we fallback to built-in WordPress authentication?
	 */
	function allow_wp_auth() {
		return (bool) $this->options['allow_wp_auth'];
	}

	/*
	 * Authenticate the user, first using the external authentication source.
	 * If allowed, fall back to WordPress password authentication.
	 */
	function authenticate($user, $username, $password) {
		global $bluestem_login_error, $redirect_to;
		$bluestem_login_error = NULL;
		$user = $this->check_remote_user();

		if ( is_wp_error($user) ) {
			if( $this->allow_wp_auth() ) {
				if( $user->get_error_code() == "empty_username" ) {
					return;
				} else {
					$bluestem_login_error = $user;
					#wp_die($user);
					return;
				}
			} else {
				if( $user->get_error_code() == "empty_username" ) {
					$bluestem_path = $this->options['bluestem_path'];
					$login_uri = preg_replace('/(\w)\/(\w)/',"$1$bluestem_path/lb_login.cgi/$2",wp_login_url($redirect_to),1);
					wp_redirect($login_uri);
					exit();
				} else {
					wp_die($user);
				}
			}
		} else {
			// User was authenticated via REMOTE_USER
			$user = new WP_User($user->ID);
		}

		return $user;
	}

	/*
	 * If the REMOTE_USER or REDIRECT_REMOTE_USER evironment variable is set, use it
	 * as the username. This assumes that you have externally authenticated the user.
	 */
	function check_remote_user() {
		$username = $_SERVER['REMOTE_USER'] ? $_SERVER['REMOTE_USER'] : $_SERVER['REDIRECT_REMOTE_USER'];

		if (! $username) {
			return new WP_Error('empty_username', '<strong>ERROR</strong>: No user found in server variables.');
		}

		// Create new users automatically, if configured
		$user = get_user_by('login', $username);
		if (! $user)  {
			if ((bool) $this->options['auto_create_user']) {
				$user = $this->_create_user($username);
			}
			else {
				// Bail out to avoid showing the login form
				$user = new WP_Error('authentication_failed', __("<strong>ERROR</strong>: $username is not available as a user on this Wordpress site."));
			}
		}

		return $user;
	}

	/*
	 * Create a new WordPress account for the specified username.
	 */
	function _create_user($username) {
		$password = wp_generate_password();
		$email_domain = $this->options['auto_create_email_domain'];

		$user_id = wp_create_user($username, $password, $username . ($email_domain ? '@' . $email_domain : ''));
		$user = get_user_by('id', $user_id);

		return $user;
	}

	/*
	 * Fill the specified URI with the site URI and the specified return location.
	 */
	function _generate_uri($uri, $redirect_to) {
		// Support tags for staged deployments
		$base = $this->_get_base_url();

		$tags = array(
			'host' => $_SERVER['HTTP_HOST'],
			'base' => $base,
			'site' => home_url(),
			'redirect' => $redirect_to,
		);

		foreach ($tags as $tag => $value) {
			$uri = str_replace('%' . $tag . '%', $value, $uri);
			$uri = str_replace('%' . $tag . '_encoded%', urlencode($value), $uri);
		}

		// Support previous versions with only the %s tag
		if (strstr($uri, '%s') !== false) {
			$uri = sprintf($uri, urlencode($redirect_to));
		}

		return $uri;
	}

	/*
	 * Return the base domain URL based on the WordPress home URL.
	 */
	function _get_base_url() {
		$home = parse_url(home_url());

		$base = home_url();
		foreach (array('path', 'query', 'fragment') as $key) {
			if (! isset($home[$key])) continue;
			$base = str_replace($home[$key], '', $base);
		}

		return $base;
	}
}

// Load the plugin hooks, etc.
$bluestem_authentication_plugin = new BluestemAuthenticationPlugin();
?>
